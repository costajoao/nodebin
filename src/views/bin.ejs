<!DOCTYPE html>
<html lang="en">

<head>
  <%- include('partials/head') %>
    <title>PostBin: Bin <%= bin.id %>
    </title>
</head>

<body class="leading-normal">
  <%- include('partials/header') %>

    <div class="container mx-auto page-content-body p-6" id="app">
      <div class="flex items-center">
        <h1>Bin <%= bin.id %>
        </h1>
        <div class="ml-auto flex items-center">
          <label class="flex items-center">
            <input type="checkbox" id="autoscroll" class="mr-2" checked />
            <span class="text-s">Live Tail</span>
          </label>
          <button id="copy-btn" class="btn ml-6">ðŸ“‹ Copy Request URL</button>
        </div>
      </div>
      <p>Try one of these and refresh to see the results:</p>
      <pre>curl -H 'X-Status: Awesome' https://<%= host %>/<%= bin.id %>
wget https://<%= host %>/<%= bin.id %>?hello=world
echo "hello=world" | POST https://<%= host %>/<%= bin.id %></pre>

      <div id="requests" class="mt-6"></div>
    </div>

    <%- include('partials/footer') %>

      <script>
        const binId = '<%= bin.id %>';
        const binUrl = `https://${location.host}/${binId}`;
        let latestTimestamp = null;
        let counter = 1;
        const MAX_REQUESTS = 100;

        document.getElementById('copy-btn').addEventListener('click', () => {
          navigator.clipboard.writeText(binUrl).then(() => {
            alert('Copied: ' + binUrl);
          });
        });

        function timeAgo(date) {
          const seconds = Math.floor((Date.now() - new Date(date).getTime()) / 1000);
          const intervals = [
            { label: 'year', seconds: 31536000 },
            { label: 'month', seconds: 2592000 },
            { label: 'day', seconds: 86400 },
            { label: 'hour', seconds: 3600 },
            { label: 'minute', seconds: 60 },
            { label: 'second', seconds: 1 }
          ];
          for (const interval of intervals) {
            const count = Math.floor(seconds / interval.seconds);
            if (count >= 1) return `${count} ${interval.label}${count > 1 ? 's' : ''} ago`;
          }
          return 'just now';
        }

        function safeJSON(input) {
          try {
            const parsed = JSON.parse(input);
            return typeof parsed === 'object' ? parsed : {};
          } catch {
            return {};
          }
        }

        function parseBody(body) {
          try {
            const parsed = JSON.parse(body);
            return typeof parsed === 'object' ? parsed : { raw: body };
          } catch {
            return { raw: body };
          }
        }

        function renderSection(title, obj) {
          const items = Object.entries(obj)
            .map(([k, v]) => `<li><strong>${k}</strong>: ${v}</li>`)
            .join('');
          return `
      <div class="fade-in p-4 border border-grey-light w-1/3">
        <h4 class="mt-0">${title}</h4>
        <ul class="list-reset">${items || '<li><em>Empty</em></li>'}</ul>
      </div>
    `;
        }

        async function loadRequests() {
          const url = `/api/bin/${binId}/requests${latestTimestamp ? `?since=${latestTimestamp}` : ''}`;

          try {
            const res = await fetch(url);
            const data = await res.json();
            if (!Array.isArray(data)) throw new Error('Invalid response');

            if (!data.length && latestTimestamp === null) {
              document.getElementById('requests').innerHTML = '<p class="text-grey" id="empty-message">No requests yet.</p>';
              return;
            }

            document.getElementById('empty-message')?.remove();
            const container = document.getElementById('requests');

            for (const req of data) {
              const headers = safeJSON(req.headers);
              const query = safeJSON(req.query);
              const body = parseBody(req.body);
              const ip = headers['x-real-ip'] || req.ip || 'n/a';
              const createdAt = new Date(req.created_at);
              const createdAtUnix = createdAt.getTime();

              // Always track latest timestamp
              if (!latestTimestamp || createdAtUnix > latestTimestamp) {
                latestTimestamp = createdAtUnix;
              }

              const html = `
          <div class="fade-in row border border-grey-dark bg-grey-light p-6">
            <h3 class="float-right m-0">[Req #${counter++} : ${ip}]</h3>
            <h3 class="m-0"><strong>${req.method} /${binId}</strong> <small class="text-grey">${timeAgo(createdAt)}</small></h3>
          </div>
          <div class="w-full flex mb-4">
            ${renderSection('Headers', headers)}
            ${renderSection('Query', query)}
            ${renderSection('Body', body)}
          </div>
        `;

              container.insertAdjacentHTML('beforeend', html);

              while (container.childElementCount > MAX_REQUESTS * 2) {
                container.removeChild(container.firstChild);
              }
            }

            if (document.getElementById('autoscroll').checked) {
              window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
            }

          } catch (err) {
            console.error('[loadRequests] Error:', err);
            document.getElementById('requests').innerHTML = '<p class="text-red">Error loading requests...</p>';
          }
        }

        loadRequests();
        setInterval(loadRequests, 3000);
      </script>
</body>

</html>